SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE BOND_HIS;
DROP TABLE BOND_INDEX_HIS;
DROP TABLE ETF_HIS;
DROP TABLE ETF_PDF;
DROP TABLE FUTURES_HIS;
DROP TABLE FX_RATE_HIS;
DROP TABLE INT_RATE_HIS;
DROP TABLE IR_CURVE_HIS;
DROP TABLE MACRO_INDEX_HIS;
DROP TABLE OPTION_HIS;
DROP TABLE PORTFOLIO_CASHFLOW;
DROP TABLE PORTFOLIO_DETAIL;
DROP TABLE PORTFOLIO_RETURN;
DROP TABLE PORTFOLIO_RISK;
DROP TABLE PORTFOLIO_RISK_DETAIL;
DROP TABLE PORTFOLIO_SENSITIVITY;
DROP TABLE POSITION_CASHFLOW;
DROP TABLE POSITION_GREEKS;
DROP TABLE POSITION_IR_SENSITITIVY;
DROP TABLE POSITION_RETURN;
DROP TABLE POSITION_RISK_DETAIL;
DROP TABLE POSITION_RISK;
DROP TABLE PRODUCT_CASHFLOW;
DROP TABLE SCENARIO_HIS;
DROP TABLE STOCK_HIS;
DROP TABLE STOCK_INDEX_HIS;
DROP TABLE SYNTHETICS_HIS;
DROP TABLE VCV_MATRIX_HIS;
DROP TABLE BASEDATE;
DROP TABLE POSITION;
DROP TABLE EMPLOYEE;
DROP TABLE BIZUNIT;
DROP TABLE BOND_INDEX_DETAIL;
DROP TABLE BOND;
DROP TABLE BOND_INDEX;
DROP TABLE HIFIVE_STRIKE;
DROP TABLE HIFIVE_SWAP_IR;
DROP TABLE HIFIVE_UNDERLYING;
DROP TABLE PRICING_UNDERLYING;
DROP TABLE PRICING;
DROP TABLE HIFIVE;
DROP TABLE COUNTERPARTY;
DROP TABLE ETF;
DROP TABLE FN_ACCOUNT;
DROP TABLE FUTURES;
DROP TABLE FX_CASH;
DROP TABLE IRC_BUCKET_DETAIL;
DROP TABLE INT_RATE;
DROP TABLE IRC_FUNCTION_DETAIL;
DROP TABLE IR_CURVE;
DROP TABLE MACRO_INDEX;
DROP TABLE OPTIONS;
DROP TABLE RISK_FACTOR;
DROP TABLE SCENARIO_DETAIL;
DROP TABLE STOCK_INDEX_DETAIL;
DROP TABLE STOCK;
DROP TABLE STOCK_INDEX;
DROP TABLE SYNTHETIC_DETAIL;
DROP TABLE SYNTHETICS;
DROP TABLE MARKET_VARIABLE;
DROP TABLE MATURITY;
DROP TABLE PORTFOLIO_CHILD;
DROP TABLE PORTFOLIO;
DROP TABLE PRICER;
DROP TABLE PRICING_METHOD;
DROP TABLE SCENARIO;
DROP TABLE SCENARIO_SET;
DROP TABLE SCENARIO_VAR;
DROP TABLE STOCK_EXCHANGE;
DROP TABLE VAR_GEN_MCD;
DROP TABLE VCV_MATRIX;
DROP TABLE VOL_CURVE;




/* Create Tables */

CREATE TABLE BASEDATE
(
	BSSD VARCHAR(8) NOT NULL,
	IS_BIZDAY CHAR(1),
	PREV_BIZDAY VARCHAR(8),
	NEXT_BIZDAY VARCHAR(8),
	EOM_BIZDAY VARCHAR(8),
	EOQ_BIZDAY VARCHAR(8),
	-- END OF SEMI ANNUAL
	EOS_BIZDAY VARCHAR(8) COMMENT 'END OF SEMI ANNUAL',
	EOY_BIZDAY VARCHAR(8),
	FISCAL_BIZDAY VARCHAR(8),
	PRIMARY KEY (BSSD)
);


CREATE TABLE BIZUNIT
(
	ORG_ID VARCHAR(20) NOT NULL,
	ORG_NAME VARCHAR(50),
	PARENT_ORG_ID VARCHAR(20),
	PRIMARY KEY (ORG_ID)
);


CREATE TABLE BOND
(
	MV_ID VARCHAR(20) NOT NULL,
	ISSUER_ID VARCHAR(30),
	FACE_AMT DECIMAL(10,0),
	TOTAL_AMT DECIMAL(19,0),
	ISSUE_DATE VARCHAR(8),
	MATURITY_DATE VARCHAR(8),
	COUPON_RATE DECIMAL(10,8),
	INT_TERM VARCHAR(10),
	COMPOUND_MTD VARCHAR(10),
	DAYCOUNT_MTD VARCHAR(10),
	-- DISCOUNT, BULLET, FIXED, FLOATING, FIXED AMORT, FLOAT_AMORT, ...
	BOND_CF_TYPE VARCHAR(10) COMMENT 'DISCOUNT, BULLET, FIXED, FLOATING, FIXED AMORT, FLOAT_AMORT, ...',
	-- FISRT, SECONDARY
	PRIORITY_CD VARCHAR(10) COMMENT 'FISRT, SECONDARY',
	-- ABS, MBS, CDO,....
	SECURITIZATION_CD VARCHAR(10) COMMENT 'ABS, MBS, CDO,....',
	CREDIT_RATING_CD VARCHAR(10),
	CURR_CD VARCHAR(3),
	PREMIUM_AT_END DECIMAL(10,4),
	-- GOV,ILB, BANK, CORP, ABS,...
	BOND_TYPE VARCHAR(10) COMMENT 'GOV,ILB, BANK, CORP, ABS,...',
	INIT_INB_INDEX DECIMAL(10,4),
	-- ANNUITY, EQUAL, BULLET
	REDEM_MCD VARCHAR(10) COMMENT 'ANNUITY, EQUAL, BULLET',
	AMORT_ST_DATE VARCHAR(8),
	DEFER_TERM VARCHAR(10),
	AMORT_CNT DECIMAL(10,0),
	AMORT_FREQ DECIMAL(10,0),
	AMORT_AMT DECIMAL(19,4),
	IS_CP_PREPAY CHAR(1),
	REF_IRC_ID VARCHAR(20),
	SPREAD_RATE DECIMAL(10,4),
	REFIXING_TERM VARCHAR(10),
	FIRST_COUPON_DATE VARCHAR(8),
	-- FORWARD, BACKWARD,...
	CP_DATE_GEN VARCHAR(10) COMMENT 'FORWARD, BACKWARD,...',
	REFIXING_SLIDE_NUM DECIMAL(10,0),
	CAP_RATE DECIMAL(10,4),
	FLOOR_RATE DECIMAL(10,4),
	-- CONVERTIBLE, EXCHANGABLE,...
	STOCK_LINKED_TYPE VARCHAR(10) COMMENT 'CONVERTIBLE, EXCHANGABLE,...',
	REF_STOCK_ID VARCHAR(20),
	OPTION_ST_DATE VARCHAR(8),
	OPTION_ED_DATE VARCHAR(8),
	STRIKE_PRICE DECIMAL(10,4),
	CONVERSION_RATIO DECIMAL(10,4),
	PRIMARY KEY (MV_ID)
);


CREATE TABLE BOND_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	BOND_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	ADJ_DURATION DECIMAL(19,4),
	MD_DURATION DECIMAL(19,4),
	EFFECT_DURATION DECIMAL(19,4),
	ADJ_CONVEXITY DECIMAL(19,4),
	EFFECT_CONVEXITY DECIMAL(19,4),
	PRIMARY KEY (BSSD, BOND_ID)
);


CREATE TABLE BOND_INDEX
(
	BOND_INDEX_ID VARCHAR(20) NOT NULL,
	BOND_INDEX_NAME VARCHAR(50),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (BOND_INDEX_ID)
);


CREATE TABLE BOND_INDEX_DETAIL
(
	BOND_INDEX_ID VARCHAR(20) NOT NULL,
	BOND_ID VARCHAR(20) NOT NULL
);


CREATE TABLE BOND_INDEX_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	BOND_INDEX_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	PRIMARY KEY (BSSD, BOND_INDEX_ID)
);


CREATE TABLE COUNTERPARTY
(
	COUNTERPARTY_ID VARCHAR(20) NOT NULL,
	COUNTERPARTY_NAME VARCHAR(50),
	-- GOV, BANK, SECURITIES, ASSET, INSURER, BROKER, ...
	COUNTERPARTY_TYPE VARCHAR(10) COMMENT 'GOV, BANK, SECURITIES, ASSET, INSURER, BROKER, ...',
	CORP_NO VARCHAR(13),
	CREDIT_RATING_CD VARCHAR(10),
	PRIMARY KEY (COUNTERPARTY_ID)
);


CREATE TABLE EMPLOYEE
(
	MEMBER_ID VARCHAR(20) NOT NULL,
	MEMBER_NAME VARCHAR(50),
	-- ADMIN, MANAGER, DEALER, STAFF,...
	MEMBER_TYPE VARCHAR(10) COMMENT 'ADMIN, MANAGER, DEALER, STAFF,...',
	ORG_ID VARCHAR(20),
	PRIMARY KEY (MEMBER_ID)
);


CREATE TABLE ETF
(
	ETF_ID VARCHAR(20) NOT NULL,
	ETF_NAME VARCHAR(50),
	ISIN_CD VARCHAR(20),
	BM_ID VARCHAR(20),
	BM_COEFFICIENT DECIMAL(10,4),
	NUM_PER_CU DECIMAL(10,0),
	NUM_SHARES DECIMAL(10,0),
	TOT_AMT DECIMAL(19,0),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (ETF_ID)
);


CREATE TABLE ETF_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	ETF_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	NAV DECIMAL(19,4),
	PRIMARY KEY (BSSD, ETF_ID)
);


-- NUMBER OF HOLDING STOCK FOR 1 CU OF ETF
CREATE TABLE ETF_PDF
(
	BSSD VARCHAR(8) NOT NULL,
	ETF_ID VARCHAR(20) NOT NULL,
	PROD_ID VARCHAR(20) NOT NULL,
	HOLDING_QTY DECIMAL(10,0),
	EVAL_AMT DECIMAL(19,4),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (BSSD, ETF_ID, PROD_ID)
) COMMENT = 'NUMBER OF HOLDING STOCK FOR 1 CU OF ETF';


CREATE TABLE FN_ACCOUNT
(
	ACCOUNT_ID VARCHAR(20) NOT NULL,
	ACCOUNT_NAME VARCHAR(50),
	DEALER_ID VARCHAR(20),
	TOTAL_LIMIT DECIMAL(19,0),
	PRIMARY KEY (ACCOUNT_ID)
);


CREATE TABLE FUTURES
(
	FUTURES_ID VARCHAR(20) NOT NULL,
	ISSUE_DATE VARCHAR(8),
	MATURITY_DATE VARCHAR(8),
	UNDERLYING_ID VARCHAR(20),
	NOTIONAL_AMT DECIMAL(19,0),
	STRIKE_PRICE DECIMAL(10,4),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (FUTURES_ID)
);


CREATE TABLE FUTURES_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	FUTURES_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	DELTA DECIMAL(19,4),
	GAMMA DECIMAL(19,4),
	VEGA DECIMAL(19,4),
	THETA DECIMAL(19,4),
	RHO DECIMAL(19,4),
	PRIMARY KEY (BSSD, FUTURES_ID)
);


CREATE TABLE FX_CASH
(
	FX_ID VARCHAR(20) NOT NULL,
	FX_NAME VARCHAR(50),
	TERM_CURR VARCHAR(3),
	BASE_CURR VARCHAR(3),
	-- FOR YEN TO KRW, FX RATE IS QUOTED BASED ON 100 YEN.
	-- SCALE_FACTOR IS SET TO 100 TO USE THE QUOTE PRICE WITHOUT ANY CONVERSION.
	SCALE_FACTOR DECIMAL(10,4) COMMENT 'FOR YEN TO KRW, FX RATE IS QUOTED BASED ON 100 YEN.
SCALE_FACTOR IS SET TO 100 TO USE THE QUOTE PRICE WITHOUT ANY CONVERSION.',
	PRIMARY KEY (FX_ID)
);


CREATE TABLE FX_RATE_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	FX_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	PRIMARY KEY (BSSD, FX_ID)
);


CREATE TABLE HIFIVE
(
	PROD_ID VARCHAR(20) NOT NULL,
	PROD_NAME VARCHAR(50),
	-- ELS
	-- SWAP
	-- 
	HIFIVE_TYPE VARCHAR(10) COMMENT 'ELS
SWAP
',
	ISSUE_DATE VARCHAR(8),
	MATURITY_DATE VARCHAR(8),
	COUNTERPARTY_ID VARCHAR(20) NOT NULL,
	-- 평가기준금액(10000원)
	FACE_AMT DECIMAL(10) COMMENT '평가기준금액(10000원)',
	-- 총발행금액
	NOTIONAL_AMT DECIMAL(10) COMMENT '총발행금액',
	DOWN_BARRIER DECIMAL(10,4),
	-- 최대손실비율(0~1)
	MAX_LOSS DECIMAL(10,4) COMMENT '최대손실비율(0~1)',
	-- KIS 의 쿠폰 배열의 마지막 인덱스의 이자율
	-- 다운 배리어 히팅시  또는 업 배리어 히팅시 적용 이자율로 추정
	COUPON_RATE_LAST DECIMAL(10,4) COMMENT 'KIS 의 쿠폰 배열의 마지막 인덱스의 이자율
다운 배리어 히팅시  또는 업 배리어 히팅시 적용 이자율로 추정',
	-- KIS
	--  1 : 업 배리어 히팅여부를 기초자산별로 판단
	--  0 : 업 배리어 히팅여부를 모든 기초자산에 대해 동시에 판단
	HITTING_TYPE VARCHAR(10) COMMENT 'KIS
 1 : 업 배리어 히팅여부를 기초자산별로 판단
 0 : 업 배리어 히팅여부를 모든 기초자산에 대해 동시에 판단',
	PRIMARY KEY (PROD_ID)
);


CREATE TABLE HIFIVE_STRIKE
(
	PROD_ID VARCHAR(20) NOT NULL,
	-- 조기상환회차
	STRIKE_SERIAL DECIMAL(10) NOT NULL COMMENT '조기상환회차',
	-- STRIKE_PRICE 평가일(조기상환평가일)
	STRIKE_DATE VARCHAR(8) COMMENT 'STRIKE_PRICE 평가일(조기상환평가일)',
	-- 조기상환금액 지급일
	PAYMENT_DATE VARCHAR(8) COMMENT '조기상환금액 지급일',
	STRIKE_PRICE DECIMAL(10,4) NOT NULL,
	-- DOUBLE JUMP STRIKE PRICE
	-- KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
	-- 조건이 있는 경우는 우선순위가 있어서 STRIKE PRICE 를 충족하면 이하 조건은 무시하는  걸로 추정된다.
	-- 
	DBL_JUMP_STRIKE DECIMAL(10,4) COMMENT 'DOUBLE JUMP STRIKE PRICE
KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
조건이 있는 경우는 우선순위가 있어서 STRIKE PRICE 를 충족하면 이하 조건은 무시하는  걸로 추정된다.
',
	-- TRIPLE JUMP STRIKE PRICE
	-- KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
	TPL_JUMP_STRIKE DECIMAL(10,4) COMMENT 'TRIPLE JUMP STRIKE PRICE
KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.',
	-- STRIKE PRICE HITTING 시 PAYOFF 비율 (예: 1.05)
	PAYOFF_AMT DECIMAL(10,4) COMMENT 'STRIKE PRICE HITTING 시 PAYOFF 비율 (예: 1.05)',
	DBL_JUMP_PAYOFF DECIMAL(10,4),
	TPL_JUMP_PAYOFF DECIMAL(10,4),
	-- STRIKE PRICE 미 히팅시 지급 이자의 비율 (예:5%)
	COUPON_RATE DECIMAL(10,4) COMMENT 'STRIKE PRICE 미 히팅시 지급 이자의 비율 (예:5%)',
	-- UP 시 KNOCK_OUT  BARRIER 비율 ( 예 : 1.2)
	UP_BARRIER DECIMAL(10,4) COMMENT 'UP 시 KNOCK_OUT  BARRIER 비율 ( 예 : 1.2)',
	PRIMARY KEY (PROD_ID, STRIKE_SERIAL)
);


CREATE TABLE HIFIVE_SWAP_IR
(
	PROD_ID VARCHAR(20) NOT NULL,
	REF_IRC_ID VARCHAR(20) NOT NULL,
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	PAYMENT_TERM VARCHAR(10) NOT NULL COMMENT 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20',
	SPREAD DECIMAL(10,4),
	FIXED_RATE DECIMAL(10,4),
	PRIMARY KEY (PROD_ID)
);


CREATE TABLE HIFIVE_UNDERLYING
(
	PROD_ID VARCHAR(20) NOT NULL,
	STOCK_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(10,4),
	-- 배당율(0~1)
	DIVIDEND DECIMAL(10,4) COMMENT '배당율(0~1)',
	-- UP BARRIER HITTING 여부 (Y/N)
	-- KIS ( 0:N  NON-HITTED, 1:Y : HITTED)
	IS_UPHITTED CHAR COMMENT 'UP BARRIER HITTING 여부 (Y/N)
KIS ( 0:N  NON-HITTED, 1:Y : HITTED)',
	PRIMARY KEY (PROD_ID, STOCK_ID)
);


CREATE TABLE INT_RATE
(
	IR_ID VARCHAR(20) NOT NULL,
	IR_NAME VARCHAR(50),
	ISSUE_DATE VARCHAR(8),
	MATURITY_DATE VARCHAR(8),
	COMPOUND_MTD VARCHAR(10),
	DAYCOUNT_MTD VARCHAR(10),
	INT_TERM VARCHAR(10),
	COUPON_RATE DECIMAL(10,8),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (IR_ID)
);


CREATE TABLE INT_RATE_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	IR_ID VARCHAR(20) NOT NULL,
	INT_RATE DECIMAL(10,4),
	PRIMARY KEY (BSSD, IR_ID)
);


CREATE TABLE IRC_BUCKET_DETAIL
(
	IRC_ID VARCHAR(20) NOT NULL,
	MATURITY_ID VARCHAR(10) NOT NULL,
	IR_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (IRC_ID, MATURITY_ID)
);


CREATE TABLE IRC_FUNCTION_DETAIL
(
	IRC_ID VARCHAR(20) NOT NULL,
	REF_IRC_ID VARCHAR(20) NOT NULL,
	COEFFICIENT DECIMAL(10,4),
	POWER DECIMAL(10,4),
	CONSTANT DECIMAL(10,4),
	PRIMARY KEY (IRC_ID, REF_IRC_ID)
);


CREATE TABLE IR_CURVE
(
	IRC_ID VARCHAR(20) NOT NULL,
	IRC_NAME VARCHAR(50),
	-- SLIDING, EXPECTATION, CONSTANT,...
	FORWARDIND_MTD VARCHAR(10) COMMENT 'SLIDING, EXPECTATION, CONSTANT,...',
	-- LINEAR, DIS_LINEAR, LOG_LINEAR, EXPONENTIAL, CONSTANT,
	-- BACKWARD_CON, CUBIC_SPLINE
	INTERPOL_MTD VARCHAR(10) COMMENT 'LINEAR, DIS_LINEAR, LOG_LINEAR, EXPONENTIAL, CONSTANT,
BACKWARD_CON, CUBIC_SPLINE',
	-- BUCKET, CURVE FUNCTION_SUM, CURVE_FUNCTION_MUL
	GENERATION_TYPE VARCHAR(10) COMMENT 'BUCKET, CURVE FUNCTION_SUM, CURVE_FUNCTION_MUL',
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (IRC_ID)
);


CREATE TABLE IR_CURVE_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	MATURITY_ID VARCHAR(10) NOT NULL COMMENT 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20',
	IRC_ID VARCHAR(20) NOT NULL,
	INT_RATE DECIMAL(10,4),
	PRIMARY KEY (BSSD, MATURITY_ID, IRC_ID)
);


CREATE TABLE MACRO_INDEX
(
	MACRO_INDEX_ID VARCHAR(20) NOT NULL,
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (MACRO_INDEX_ID)
);


CREATE TABLE MACRO_INDEX_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	MACRO_INDEX_ID VARCHAR(20) NOT NULL,
	INDEX_VALUE DECIMAL(19,4),
	PRIMARY KEY (BSSD, MACRO_INDEX_ID)
);


CREATE TABLE MARKET_VARIABLE
(
	MV_ID VARCHAR(20) NOT NULL,
	MV_NAME VARCHAR(50),
	MV_TYPE VARCHAR(10),
	PRODUCT_YN VARCHAR(1),
	RF_YN VARCHAR(1),
	PRIMARY KEY (MV_ID)
);


CREATE TABLE MATURITY
(
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	MATURITY_ID VARCHAR(10) NOT NULL COMMENT 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20',
	DAY_NUM DECIMAL(10,0),
	PRIMARY KEY (MATURITY_ID)
);


CREATE TABLE OPTIONS
(
	OPTION_ID VARCHAR(20) NOT NULL,
	OPTION_NAME VARCHAR(50),
	-- CALL, PUT 
	OPTION_TYPE VARCHAR(10) COMMENT 'CALL, PUT ',
	-- INDEX, STOCK, BINARY, BARIRRER, ....
	-- 
	EXOTIC_TYPE VARCHAR(10) COMMENT 'INDEX, STOCK, BINARY, BARIRRER, ....
',
	ISSUE_DATE VARCHAR(8),
	MATURITY_DATE VARCHAR(8),
	UNDERLYING_ID VARCHAR(20),
	STRIKE_PRICE DECIMAL(10,4),
	-- MULTIPLIER TO CONVERT PRICE INTO CURRENCY AMOUNT
	MULTIPLIER DECIMAL(10,0) COMMENT 'MULTIPLIER TO CONVERT PRICE INTO CURRENCY AMOUNT',
	-- RATIO TO CHANGE OPTION INTO UNDERLING ASSET
	CONVERSION_RATIO DECIMAL(10,4) COMMENT 'RATIO TO CHANGE OPTION INTO UNDERLING ASSET',
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	ISSUER_ID VARCHAR(20),
	EXCHANGE_ID VARCHAR(20),
	PRIMARY KEY (OPTION_ID)
);


CREATE TABLE OPTION_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	OPTION_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	DELTA DECIMAL(19,4),
	GAMMA DECIMAL(19,4),
	VEGA DECIMAL(19,4),
	THETA DECIMAL(19,4),
	RHO DECIMAL(19,4),
	IMPLIED_VOL DECIMAL(19,4),
	UNSETTLE_AMT DECIMAL(19,0),
	PRIMARY KEY (BSSD, OPTION_ID)
);


CREATE TABLE PORTFOLIO
(
	PORT_ID VARCHAR(50) NOT NULL,
	PORT_NAME VARCHAR(50),
	GROUP_ID VARCHAR(20),
	PARENT_PORT_ID VARCHAR(50),
	LEVEL1 VARCHAR(20),
	LEVEL2 VARCHAR(20),
	LEVEL3 VARCHAR(20),
	LEVEL4 VARCHAR(20),
	LEVEL5 VARCHAR(20),
	PRIMARY KEY (PORT_ID)
);


CREATE TABLE PORTFOLIO_CASHFLOW
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	CF_DATE VARCHAR(8) NOT NULL,
	CF_AMT DECIMAL(19,4),
	CF_PRIN_AMT DECIMAL(19,4),
	CF_INT_AMT DECIMAL(19,4),
	PRIMARY KEY (BSSD, PORT_ID, CF_DATE)
);


CREATE TABLE PORTFOLIO_CHILD
(
	PORT_ID VARCHAR(50) NOT NULL,
	SUB_PORT_ID VARCHAR(50) NOT NULL,
	PRIMARY KEY (PORT_ID, SUB_PORT_ID)
);


CREATE TABLE PORTFOLIO_DETAIL
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	PRIMARY KEY (BSSD, PORT_ID, POS_ID)
);


CREATE TABLE PORTFOLIO_RETURN
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	BOOK_AMT DECIMAL(19,4),
	PRES_VALUE DECIMAL(19,4),
	DAILY_RETURN DECIMAL(19,4),
	MONTHLY_RETURN DECIMAL(19,4),
	QUARTLY_RETURN DECIMAL(19,4),
	ANNUAL_RETURN DECIMAL(19,4),
	FISCAL_RETURN DECIMAL(19,4),
	DELTA_RETURN DECIMAL(19,4),
	GAMMA_RETURN DECIMAL(19,4),
	VEGA_RETURN DECIMAL(19,4),
	THETA_RETURN DECIMAL(19,4),
	RHO_RETURN DECIMAL(19,4),
	PRIMARY KEY (BSSD, PORT_ID)
);


CREATE TABLE PORTFOLIO_RISK
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	VAR_GEN_ID VARCHAR(10) NOT NULL,
	VAR DECIMAL(19,4),
	EXPECTED_SHORTFALL DECIMAL(19,4),
	EQ_VAR DECIMAL(19,4),
	FX_VAR DECIMAL(19,4),
	IR_VAR DECIMAL(19,4),
	CO_VAR DECIMAL(19,4),
	MARGINAL_VAR DECIMAL(19,4),
	CONTRIBUTION_VAR DECIMAL(19,4),
	PRIMARY KEY (BSSD, PORT_ID, VAR_GEN_ID)
);


CREATE TABLE PORTFOLIO_RISK_DETAIL
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	-- FOR VAR_TYPE WITH DELTA_NORMAL, DELTA_GAMMA 
	VAR_GEN_ID VARCHAR(10) NOT NULL COMMENT 'FOR VAR_TYPE WITH DELTA_NORMAL, DELTA_GAMMA ',
	RF_ID VARCHAR(20) NOT NULL,
	DELTA_EQUV DECIMAL(19,4),
	GAMMA_EQUV DECIMAL(19,4),
	PRIMARY KEY (BSSD, PORT_ID, VAR_GEN_ID, RF_ID)
);


CREATE TABLE PORTFOLIO_SENSITIVITY
(
	BSSD VARCHAR(8) NOT NULL,
	PORT_ID VARCHAR(50) NOT NULL,
	BOOK_AMT DECIMAL(19,4),
	PRES_VALUE DECIMAL(19,4),
	-- WEIGHTED RESIDUAL MATURITY
	WGT_RES_MATURITY DECIMAL(19,4) COMMENT 'WEIGHTED RESIDUAL MATURITY',
	ADJ_DURATION DECIMAL(19,4),
	MD_DURATION DECIMAL(19,4),
	EFFECT_DURATION DECIMAL(19,4),
	ADJ_CONVEXITY DECIMAL(19,4),
	EFFECT_CONVEXITY DECIMAL(19,4),
	PV01 DECIMAL(19,4),
	PRIMARY KEY (BSSD, PORT_ID)
);


CREATE TABLE POSITION
(
	POS_ID VARCHAR(50) NOT NULL,
	POS_NAME VARCHAR(50),
	PROD_ID VARCHAR(20),
	DEALER_ID VARCHAR(20),
	COUNTERPARTY_ID VARCHAR(20),
	ACCOUNT_ID VARCHAR(20),
	INIT_TX_DATE VARCHAR(8),
	LAST_TX_DATE VARCHAR(8),
	INIT_TX_PRICE DECIMAL(19,4),
	INIT_FEE_AMT DECIMAL(19,4),
	INIT_TX_AMT DECIMAL(19,4),
	HOLDING_QTY DECIMAL(19,4),
	POS_AMT DECIMAL(19,4),
	PRIMARY KEY (POS_ID)
);


CREATE TABLE POSITION_CASHFLOW
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	CF_DATE VARCHAR(8) NOT NULL,
	CF_AMT DECIMAL(19,4),
	CF_PRIN_AMT DECIMAL(19,4),
	CF_INT_AMT DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID, CF_DATE)
);


CREATE TABLE POSITION_GREEKS
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	UNDERLYING_ID VARCHAR(20) NOT NULL,
	DELTA DECIMAL(19,4),
	GAMMA DECIMAL(19,4),
	VEGA DECIMAL(19,4),
	THETA DECIMAL(19,4),
	RHO DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID, UNDERLYING_ID)
);


CREATE TABLE POSITION_IR_SENSITITIVY
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	RESIDUAL_MATURITY DECIMAL(10,4),
	ADJ_DURATION DECIMAL(19,4),
	MD_DURATION DECIMAL(19,4),
	EFFECT_DURATION DECIMAL(19,4),
	ADJ_CONVEXITY DECIMAL(19,4),
	EFFECT_CONVEXITY DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID)
);


CREATE TABLE POSITION_RETURN
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	BOOK_AMT DECIMAL(19,4),
	PV DECIMAL(19,4),
	DAILY_RETURN DECIMAL(19,4),
	MONTHLY_RETURN DECIMAL(19,4),
	QUARTLY_RETURN DECIMAL(19,4),
	ANNUAL_RETURN DECIMAL(19,4),
	FISCAL_RETURN DECIMAL(19,4),
	DELTA_RETURN DECIMAL(19,4),
	GAMMA_RETURN DECIMAL(19,4),
	VEGA_RETURN DECIMAL(19,4),
	THETA_RETURN DECIMAL(19,4),
	RHO_RETURN DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID)
);


CREATE TABLE POSITION_RISK
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	VAR_GEN_ID VARCHAR(10) NOT NULL,
	VAR DECIMAL(19,4),
	EXPECTED_SHORTFALL DECIMAL(19,4),
	EQ_VAR DECIMAL(19,4),
	FX_VAR DECIMAL(19,4),
	IR_VAR DECIMAL(19,4),
	CO_VAR DECIMAL(19,4),
	MARGINAL_VAR DECIMAL(19,4),
	CONTRIBUTION_VAR DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID, VAR_GEN_ID)
);


CREATE TABLE POSITION_RISK_DETAIL
(
	BSSD VARCHAR(8) NOT NULL,
	POS_ID VARCHAR(50) NOT NULL,
	VAR_GEN_ID VARCHAR(10) NOT NULL,
	RF_ID VARCHAR(20) NOT NULL,
	DELTA_EQUV DECIMAL(19,4),
	GAMMA_EQUV DECIMAL(19,4),
	PRIMARY KEY (BSSD, POS_ID, VAR_GEN_ID, RF_ID)
);


CREATE TABLE PRICER
(
	-- PRICING 모듈 식별자
	PRICER_ID VARCHAR(20) NOT NULL COMMENT 'PRICING 모듈 식별자',
	PRICER_NAME VARCHAR(50),
	-- ANALYTIC, MC, FDM
	PRICER_TYPE VARCHAR(10) COMMENT 'ANALYTIC, MC, FDM',
	-- PRICING 모듈 원천
	-- INHOUSE
	-- KIS
	-- NUMERIX
	PRICER_VENDOR VARCHAR(10) COMMENT 'PRICING 모듈 원천
INHOUSE
KIS
NUMERIX',
	MC_NUM DECIMAL(10),
	FDM_LATTICE_NUM DECIMAL(10),
	DLL_NAME VARCHAR(50),
	PRIMARY KEY (PRICER_ID)
);


CREATE TABLE PRICING
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR(20) NOT NULL COMMENT 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT',
	PROD_ID VARCHAR(20) NOT NULL,
	-- PRICING 모듈 식별자
	PRICER_ID VARCHAR(20) NOT NULL COMMENT 'PRICING 모듈 식별자',
	IRC_ID VARCHAR(20) NOT NULL,
	VOL_CURVE_ID VARCHAR(20) NOT NULL,
	VCV_ID VARCHAR(20) NOT NULL,
	-- MC 시뮬레이션 회수
	MC_NUM DECIMAL(10) COMMENT 'MC 시뮬레이션 회수',
	-- FDM 격자수
	FDM_LATTICE_NUM DECIMAL(10) COMMENT 'FDM 격자수',
	PRIMARY KEY (PRICING_OBJECT, PROD_ID)
);


CREATE TABLE PRICING_METHOD
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR(20) NOT NULL COMMENT 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT',
	PRICNG_OBJECT_NAME VARCHAR(50),
	PRIMARY KEY (PRICING_OBJECT)
);


CREATE TABLE PRICING_UNDERLYING
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR(20) NOT NULL COMMENT 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT',
	PROD_ID VARCHAR(20) NOT NULL,
	STOCK_ID VARCHAR(20) NOT NULL,
	REF_IRC_ID VARCHAR(20) NOT NULL,
	VOL_CURVE_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (PRICING_OBJECT, PROD_ID, STOCK_ID)
);


CREATE TABLE PRODUCT_CASHFLOW
(
	BSSD VARCHAR(8) NOT NULL,
	PROD_ID VARCHAR(20) NOT NULL,
	CF_DATE VARCHAR(8) NOT NULL,
	CF_AMT DECIMAL(19,4),
	CF_PRIN_AMT DECIMAL(19,4),
	CF_INT_AMT DECIMAL(19,4),
	PRIMARY KEY (BSSD, PROD_ID, CF_DATE)
);


CREATE TABLE RISK_FACTOR
(
	RF_ID VARCHAR(20) NOT NULL,
	RF_NAME VARCHAR(50),
	-- EQ, IR, FX, CO, VO
	RF_TYPE VARCHAR(10) COMMENT 'EQ, IR, FX, CO, VO',
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (RF_ID)
);


CREATE TABLE SCENARIO
(
	SCENARIO_ID VARCHAR(20) NOT NULL,
	SCENARIO_NAME VARCHAR(50),
	-- UD, HSVAR, MCVAR, ...
	SCENARIO_TYPE VARCHAR(10) COMMENT 'UD, HSVAR, MCVAR, ...',
	SCENARIO_SET VARCHAR(20),
	PRIMARY KEY (SCENARIO_ID)
);


CREATE TABLE SCENARIO_DETAIL
(
	SCENARIO_ID VARCHAR(20) NOT NULL,
	MV_ID VARCHAR(20) NOT NULL,
	-- MULTIPLE, ADD, ...
	SHOCK_TYPE VARCHAR(10) COMMENT 'MULTIPLE, ADD, ...',
	SHOCK_VALUE DECIMAL(19,4),
	PRIMARY KEY (SCENARIO_ID, MV_ID)
);


CREATE TABLE SCENARIO_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	SCENARIO_ID VARCHAR(20) NOT NULL,
	MV_ID VARCHAR(20) NOT NULL,
	BASE_VALUE DECIMAL(19,4),
	SCENARIO_VALUE DECIMAL(19,4),
	PRIMARY KEY (BSSD, SCENARIO_ID, MV_ID)
);


CREATE TABLE SCENARIO_SET
(
	SCENARIO_SET VARCHAR(20) NOT NULL,
	SCENARIO_SET_NAME VARCHAR(50),
	VAR_SCE_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (SCENARIO_SET)
);


-- SETTINGS FOR CONVERTING SCENARIO USED IN VAR CALCULATION  INTO GENERAL FORM.
-- SO IT REQUIRES THE SCENARIO GENERATION PROCEDURE
CREATE TABLE SCENARIO_VAR
(
	VAR_SCE_ID VARCHAR(20) NOT NULL,
	-- HISTORICAL, MC
	VAR_TYPE VARCHAR(10) COMMENT 'HISTORICAL, MC',
	TIME_HORIZON DECIMAL(10,0),
	-- ONLY FOR HISTIORICAL VAR
	-- TO PICK THE HISTORY MARKET DATA BACKWARD FROM THIS DATE  TO GENERATE HISTORICAL SCEANRIO.  IF NULL, PICK THE  HISTORY DATA FROM CURRENT DATA
	SAMPLING_BSSD VARCHAR(8) COMMENT 'ONLY FOR HISTIORICAL VAR
TO PICK THE HISTORY MARKET DATA BACKWARD FROM THIS DATE  TO GENERATE HISTORICAL SCEANRIO.  IF NULL, PICK THE  HISTORY DATA FROM CURRENT DATA',
	SAMPLING_SIZE DECIMAL(10,0),
	-- VARIANCE_COVARIANCE MATRIX FOR MONTE CARLO SIMULATION
	VCV_ID VARCHAR(20) COMMENT 'VARIANCE_COVARIANCE MATRIX FOR MONTE CARLO SIMULATION',
	PRIMARY KEY (VAR_SCE_ID)
) COMMENT = 'SETTINGS FOR CONVERTING SCENARIO USED IN VAR CALCULATION  IN';


CREATE TABLE STOCK
(
	MV_ID VARCHAR(20) NOT NULL,
	-- NOMARL, PREFERRED, ETF,SPEC, ...
	STOCK_TYPE VARCHAR(10) COMMENT 'NOMARL, PREFERRED, ETF,SPEC, ...',
	-- STOCK EXCHANGE IDENDIFIER
	EXCHANGE_ID VARCHAR(20) COMMENT 'STOCK EXCHANGE IDENDIFIER',
	IS_LISTED CHAR(1),
	NUM_SHARES DECIMAL(10,0),
	ISSUER_ID VARCHAR(30),
	FACE_AMT DECIMAL(10,0),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (MV_ID)
);


CREATE TABLE STOCK_EXCHANGE
(
	EXCHANGE_ID VARCHAR(20) NOT NULL,
	EXCHANGE_NAME VARCHAR(50),
	CURR_CD VARCHAR(3),
	NATION_CD VARCHAR(3),
	PRIMARY KEY (EXCHANGE_ID)
);


CREATE TABLE STOCK_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	STOCK_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	DIVIDEN_GAP DECIMAL(19,4),
	PRIMARY KEY (BSSD, STOCK_ID)
);


CREATE TABLE STOCK_INDEX
(
	ST_INDEX_ID VARCHAR(20) NOT NULL,
	ST_INDEX_NAME VARCHAR(50),
	INDEX_TYPE VARCHAR(10),
	PRIMARY KEY (ST_INDEX_ID)
);


CREATE TABLE STOCK_INDEX_DETAIL
(
	ST_INDEX_ID VARCHAR(20) NOT NULL,
	STOCK_ID VARCHAR(20) NOT NULL,
	INIT_WEIGHT DECIMAL(10,4),
	INIT_AMT DECIMAL(19,0),
	IS_ACTIVE CHAR(1),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (ST_INDEX_ID, STOCK_ID)
);


CREATE TABLE STOCK_INDEX_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	ST_INDEX_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	PRIMARY KEY (BSSD, ST_INDEX_ID)
);


CREATE TABLE SYNTHETICS
(
	SYN_PROD_ID VARCHAR(20) NOT NULL,
	-- SWAP, SPREAD, USER_DEFINED
	SYNTHETIC_TYPE VARCHAR(10) COMMENT 'SWAP, SPREAD, USER_DEFINED',
	SYN_PROD_NAME VARCHAR(50),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (SYN_PROD_ID)
);


CREATE TABLE SYNTHETICS_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	SYN_PROD_ID VARCHAR(20) NOT NULL,
	BASE_PRICE DECIMAL(19,4),
	OPEN_PRICE DECIMAL(19,4),
	HIGH_PRICE DECIMAL(19,4),
	LOW_PRICE DECIMAL(19,4),
	CLOSE_PRICE DECIMAL(19,4),
	VOLUME DECIMAL(19,0),
	VOLUME_AMT DECIMAL(19,0),
	PRIMARY KEY (BSSD, SYN_PROD_ID)
);


CREATE TABLE SYNTHETIC_DETAIL
(
	SYN_PROD_ID VARCHAR(20) NOT NULL,
	SUB_PROD_ID VARCHAR(20) NOT NULL,
	SUB_PROD_NAME VARCHAR(50),
	WEIGHT DECIMAL(19,4),
	SOURCE_TABLE VARCHAR(50),
	USER_NAME VARCHAR(20),
	LAST_UPDATED VARCHAR(8),
	VERSION_NO DECIMAL,
	PRIMARY KEY (SYN_PROD_ID, SUB_PROD_ID)
);


CREATE TABLE VAR_GEN_MCD
(
	VAR_GEN_ID VARCHAR(10) NOT NULL,
	-- DELTA_NORMAL, DELTA_GAMMA, HISTORICAL, MC
	VAR_TYPE VARCHAR(10) COMMENT 'DELTA_NORMAL, DELTA_GAMMA, HISTORICAL, MC',
	TIME_HORIZON DECIMAL(10),
	PRIMARY KEY (VAR_GEN_ID)
);


CREATE TABLE VCV_MATRIX
(
	VCV_ID VARCHAR(20) NOT NULL,
	-- EWMA, SMA, GARCH...
	VCV_TYPE VARCHAR(10) COMMENT 'EWMA, SMA, GARCH...',
	SAMPLING_SIZE DECIMAL(10,0),
	TIME_HORIZON DECIMAL(10),
	DECAY_FACTOR DECIMAL(10,4),
	-- APPLY ZERO MEAN EVEN THOUGH THE CALCUALTED MEAN OF SAMPLING DATA IS NOT ZERO
	ZERO_MEAN CHAR(1) DEFAULT 'Y' COMMENT 'APPLY ZERO MEAN EVEN THOUGH THE CALCUALTED MEAN OF SAMPLING DATA IS NOT ZERO',
	-- FOR IR TYPE MARKET VARIABLE, THIS FLAG INDICATES THAT THE RAW DATA IS USED FOR ESTIMATION OR CONVERTED DISCOUNT FACTOR IS USED
	PRICE_VOL CHAR(1) DEFAULT 'Y' COMMENT 'FOR IR TYPE MARKET VARIABLE, THIS FLAG INDICATES THAT THE RAW DATA IS USED FOR ESTIMATION OR CONVERTED DISCOUNT FACTOR IS USED',
	PRIMARY KEY (VCV_ID)
);


CREATE TABLE VCV_MATRIX_HIS
(
	BSSD VARCHAR(8) NOT NULL,
	VCV_ID VARCHAR(20) NOT NULL,
	RF_ID VARCHAR(20) NOT NULL,
	REF_RF_ID VARCHAR(20) NOT NULL,
	COVARIANCE DECIMAL(19,4),
	CORREL DECIMAL(10,4),
	PRIMARY KEY (BSSD, VCV_ID, RF_ID, REF_RF_ID)
);


CREATE TABLE VOL_CURVE
(
	VOL_CURVE_ID VARCHAR(20) NOT NULL,
	VOL_CURVE_NAME VARCHAR(50),
	UNDERLYING_ID VARCHAR(20),
	PRIMARY KEY (VOL_CURVE_ID)
);



